<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[SQL Aggregate Across Columns]]></title>
      <url>www.datagriff.com/2016/06/SQLAggregateAcrossColumns/</url>
      <content type="html"><![CDATA[<p>In order to aggregate across columns in SQL you can use the following syntax.</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">Aggregate</span>(v) <span class="keyword">FROM</span> (<span class="keyword">VALUES</span> (ColA), (ColB), (ColC),...) <span class="keyword">AS</span> <span class="keyword">value</span>(v)) <span class="keyword">as</span> [AggregateCol]</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Object</span>;</span><br></pre></td></tr></table></figure>
<h2 id="Aggregate-Dates-Across-Columns-Example"><a href="#Aggregate-Dates-Across-Columns-Example" class="headerlink" title="Aggregate Dates Across Columns Example"></a>Aggregate Dates Across Columns Example</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Example 1: Dates Min and Max Across Columns</span></span><br><span class="line">WITH CTE AS (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CAST</span>(<span class="string">'01-Jan-2016'</span> <span class="keyword">AS</span> <span class="built_in">DATE</span>) <span class="keyword">AS</span> DateA, <span class="keyword">CAST</span>(<span class="string">'10-Jan-2016'</span> <span class="keyword">AS</span> <span class="built_in">DATE</span>) <span class="keyword">AS</span> DateB, <span class="keyword">CAST</span>(<span class="string">'15-Jan-2016'</span> <span class="keyword">AS</span> <span class="built_in">DATE</span>) <span class="keyword">AS</span> DateC</span><br><span class="line"><span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> <span class="string">'05-Jan-2016'</span> <span class="keyword">AS</span> DateA, <span class="string">'04-Jan-2016'</span> <span class="keyword">AS</span> DateB, <span class="string">'16-Jan-2016'</span> <span class="keyword">AS</span> DateC</span><br><span class="line"><span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> <span class="string">'08-Jan-2016'</span> <span class="keyword">AS</span> DateA, <span class="string">'31-Dec-2015'</span> <span class="keyword">AS</span> DateB, <span class="string">'10-Jan-2016'</span> <span class="keyword">AS</span> DateC</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">MAX</span>(v) <span class="keyword">FROM</span> (<span class="keyword">VALUES</span> (DateA), (DateB), (DateC)) <span class="keyword">AS</span> <span class="keyword">value</span>(v)) <span class="keyword">as</span> [MaxDate]</span><br><span class="line">  ,  (<span class="keyword">SELECT</span> <span class="keyword">MIN</span>(v) <span class="keyword">FROM</span> (<span class="keyword">VALUES</span> (DateA), (DateB), (DateC)) <span class="keyword">AS</span> <span class="keyword">value</span>(v)) <span class="keyword">as</span> [MinDate]</span><br><span class="line"><span class="keyword">FROM</span> CTE;</span><br></pre></td></tr></table></figure>
<p><strong>Outputs</strong></p>
<table>
<thead>
<tr>
<th>MaxDate</th>
<th>MinDate</th>
</tr>
</thead>
<tbody>
<tr>
<td>2016-01-15</td>
<td>2016-01-01</td>
</tr>
<tr>
<td>2016-01-16</td>
<td>2016-01-04</td>
</tr>
<tr>
<td>2016-01-10</td>
<td>2015-12-31</td>
</tr>
</tbody>
</table>
<h2 id="Aggregate-Numeric-Across-Columns-Example"><a href="#Aggregate-Numeric-Across-Columns-Example" class="headerlink" title="Aggregate Numeric Across Columns Example"></a>Aggregate Numeric Across Columns Example</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Example 2: Sum and Average Numbers Across Columns</span></span><br><span class="line">WITH CTE AS (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span> <span class="keyword">AS</span> NumA, <span class="number">10</span> <span class="keyword">AS</span> <span class="keyword">NumB</span>, <span class="number">15</span> <span class="keyword">AS</span> NumC</span><br><span class="line"><span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> <span class="number">20</span> <span class="keyword">AS</span> NumA, <span class="number">40</span> <span class="keyword">AS</span> <span class="keyword">NumB</span>, <span class="number">60</span> <span class="keyword">AS</span> NumC</span><br><span class="line"><span class="keyword">UNION</span> ALL <span class="keyword">SELECT</span> <span class="number">25</span> <span class="keyword">AS</span> NumA, <span class="number">50</span> <span class="keyword">AS</span> <span class="keyword">NumB</span>, <span class="number">75</span> <span class="keyword">AS</span> NumC</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(v) <span class="keyword">FROM</span> (<span class="keyword">VALUES</span> (NumA), (<span class="keyword">NumB</span>), (NumC)) <span class="keyword">AS</span> <span class="keyword">value</span>(v)) <span class="keyword">as</span> [SumNum]</span><br><span class="line">  ,  (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(v) <span class="keyword">FROM</span> (<span class="keyword">VALUES</span> (NumA), (<span class="keyword">NumB</span>), (NumC)) <span class="keyword">AS</span> <span class="keyword">value</span>(v)) <span class="keyword">as</span> [AvgNum]</span><br><span class="line"> <span class="keyword">FROM</span> CTE;</span><br></pre></td></tr></table></figure>
<p><strong>Outputs</strong></p>
<table>
<thead>
<tr>
<th>SumNum</th>
<th>AvgNum</th>
</tr>
</thead>
<tbody>
<tr>
<td>30</td>
<td>10</td>
</tr>
<tr>
<td>120</td>
<td>40</td>
</tr>
<tr>
<td>150</td>
<td>50</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[test]]></title>
      <url>www.datagriff.com/2016/06/test/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Configure Hexo]]></title>
      <url>www.datagriff.com/2016/06/ConfigureHexo/</url>
      <content type="html"><![CDATA[<h2 id="Configuring-Hexo-using-the-config-yml-file"><a href="#Configuring-Hexo-using-the-config-yml-file" class="headerlink" title="Configuring Hexo using the _config.yml file"></a>Configuring Hexo using the _config.yml file</h2><p>In the directory where you initalised hexo, you should see a file called _config.yml file. This is the file you edit to configure your hexo environment. At a bare minimum I did the following to get up and running quickly and efficiently.</p>
<p>I amended the site section at the top of the file to contain my and my site details.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: dataGriff</span><br><span class="line">subtitle: A blog about data from a guy named Griff</span><br><span class="line">description: A blog with content on SQL, data warehousing, business intelligence and all the rest!</span><br><span class="line">author: Richard Griffiths</span><br><span class="line">language: default</span><br><span class="line">timezone: GMT</span><br></pre></td></tr></table></figure>
<p><strong>Important Note:</strong> It is important to change the language to default as leaving it as “en” was causing the language to be random everytime I generated the site. This was a bug in hexo at the time of writing.</p>
<p>In the URL section I changed the URL to be my custom domain (“www.datagriff.com”) and amended the permalink of each post to be just down to the month level and not down to day.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: www.datagriff.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p>
<p>In the directory section I just changed the output path to <strong>../Output</strong>, from the default of public, which means the HTML files that get outputted go into a folder in the directory above the source path called Output, as I didn’t want the deployment to generate in the same folder as the source. This would cause all sorts of headaches with source control and with the number of git files. I preferred to keep the source code and ouput files separate.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: ../Output</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure>
<p>The only other thing I changed at this point was the deployment details, where I used the git type and entered in my github io repository where I’d be deploying my output.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/griff182uk/griff182uk.github.io</span><br></pre></td></tr></table></figure>
<p>There are a number of other configuration items that I’m sure could be messed around with found at <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a>, but I found the above was enough to get me going.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Using Git Hub for Web Hosting]]></title>
      <url>www.datagriff.com/2016/06/UsingGitHubForWebHosting/</url>
      <content type="html"><![CDATA[<h2 id="Creating-a-Git-Hub-io-Repo"><a href="#Creating-a-Git-Hub-io-Repo" class="headerlink" title="Creating a Git Hub io Repo"></a>Creating a Git Hub io Repo</h2><p><strong><a href="https://github.com/" title="GitHub" target="_blank" rel="external">GitHub</a></strong> allows you each user to host one website as part of their service using a <a href="https://pages.github.com/" title="Github pages" target="_blank" rel="external">github “io” repoistory</a>.</p>
<p>To do this create a new github repository called [YourUserName]/[YourUserName].github.io.</p>
<p><img src="/images/GitHubIORepo.png" alt="My IO GitHub Repo"></p>
<p>I used this for my blog and so the URL for the github repository above was what I used in my Hexo _config.yml file in the deployment section.</p>
<p>Once you have deployed to the github repository you can view the site using the URL [YourUserName].github.io.</p>
<p>If you have a custom domain you want to use then you need to go to settings of your repo and where it says “Custom Domain” - add your custom domain name and save. This will add a CNAME file to your repository with the name of your custom domain in there.</p>
<p><strong>Important Note:</strong> In order for this CNAME file to persist, you should create it in your local output folder (with no file name extension), with the name of your custom domain. I found that if I didn’t do this everytime I pushed from my local folder the CNAME file would disappear and the connection from my github URL to my custom domain would disappear and I’d get a 404 error, so be aware of this!</p>
<p><img src="/images/CNAMEFolder.png" alt="CNAME File in Source Folder"></p>
<p><img src="/images/CNAMEContent.png" alt="CNAME Content"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Deploying Hexo]]></title>
      <url>www.datagriff.com/2016/06/DeployingHexo/</url>
      <content type="html"><![CDATA[<h2 id="Generating-the-Files"><a href="#Generating-the-Files" class="headerlink" title="Generating the Files"></a>Generating the Files</h2><p>When in node.js command prompt, navigate to your source folder where you initialised hexo, and type<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<p>This will deploy all the html files to the output path you designated in the _config.yml file.</p>
<p><img src="/images/HexoGenerate.png" alt="Hexo Generate Output"></p>
<p>In my case I’d configured the files to generate in a folder above the source folder called outputs (../Output was what I had in the _config.yml file). The output folder should look something to below.</p>
<p><img src="/images/HexoOutputFiles.png" alt="Hexo Output Files"></p>
<h2 id="Deploying-Hexo"><a href="#Deploying-Hexo" class="headerlink" title="Deploying Hexo"></a>Deploying Hexo</h2><p>I chose to use git for my hexo deployment so before you can use the hexo deploy command below, you first need to install this. To install git deployment, while in the hexo initalised folder, type the following command and press return.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>You also need to ensure that in your _config.yml file that you have git specified as the deploy method and the name of your github io repository specified.<br>To deploy then, when in node.js command prompt, navigate to your source folder where you initialised hexo, and type<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>This will deploy and push the files to the github repo you specified in the _config.yml file.</p>
<p><img src="/images/HexoDeploy.png" alt="Hexo Deploy Output"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Install and Initialise Hexo]]></title>
      <url>www.datagriff.com/2016/06/InstallAndInitaliseHexo/</url>
      <content type="html"><![CDATA[<p>Inspired by the awesome <strong><a href="https://www.pluralsight.com/" title="Pluralsight" target="_blank" rel="external">Pluralsight</a></strong> and it’s course on <a href="http://www.staticgen.com/" title="Title" target="_blank" rel="external">static site generators</a>, I decided to implement a blog using hexo.</p>
<p>The steps shown below are what you need to install and initalise Hexo locally.</p>
<h2 id="Required-Applications-and-Installations"><a href="#Required-Applications-and-Installations" class="headerlink" title="Required Applications and Installations"></a>Required Applications and Installations</h2><p>The following items were required to create my blog, which I either already had or required to install.</p>
<ul>
<li><strong><a href="https://git-scm.com/downloads" title="Git" target="_blank" rel="external">Git</a></strong>  - Of course I already had it installed! Git will provide the methods of source control and also in my case, provide the host for my blog web page.</li>
<li><strong><a href="https://nodejs.org/en/" title="Node.js" target="_blank" rel="external">Node.js</a></strong> - Downloaded this for windows X64, as I have a 64 bit machine, chose all the defaults and so “Next Next Nexted” until Finish.</li>
<li><strong>NPM</strong> - This installed with the latest version of Node.js above anyway so I didn’t need to do anything here.</li>
<li><strong><a href="https://atom.io/" title="Atom" target="_blank" rel="external">Atom</a></strong>  - Even though I’d used notepad++ as my text editor up until this point, it didn’t have any native markdown features so I got converted to atom. It has appropriate syntax highlighting for markdown and has a useful live HTML preview feature (CTRL+Shift+M). Therefore my first blog post (this one) was written with atom and I’m likely to stick with it…</li>
<li><strong><a href="https://hexo.io/" title="Hexo" target="_blank" rel="external">Hexo</a></strong> - Is a static site generator application and the main application I have used to implement my blog. The home page of Hexo gives you the command to install, so I opened up my command prompt and typed it in. At the time of my implementation of my blog this was…<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>Note:</strong> I actually used the node.js command prompt when performing these tasks, not windows command prompt, in case windows command prompt doesn’t work!</p>
<p>Then type in hexo into the command prompt and if the installation was a success you’ll get a load of hexo details back in the command window. Tidy!</p>
<h2 id="Using-Hexo-to-Initiate-my-Folders-and-Files"><a href="#Using-Hexo-to-Initiate-my-Folders-and-Files" class="headerlink" title="Using Hexo to Initiate my Folders and Files"></a>Using Hexo to Initiate my Folders and Files</h2><p>I created a folder in the desired location for my dataGriff blog by typing in the command (replace [My Path] with your folder path)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mrkdir //[My Path]/dataGriff</span><br></pre></td></tr></table></figure></p>
<p>Then I changed directory to this folder using<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd //[My Path]/dataGriff</span><br></pre></td></tr></table></figure></p>
<p>Finally I initialised hexo on the folder using<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure></p>
<p>There was a little message at the end of the command prompt output that stated<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO Start blogging with hexo</span><br></pre></td></tr></table></figure></p>
<p>So I thought I must be on the right track!</p>
<p><img src="/images/HexoStartBlogging.png" alt="Hexo Start Blogging"></p>
<h2 id="Viewing-Hexos-Startup-Template"><a href="#Viewing-Hexos-Startup-Template" class="headerlink" title="Viewing Hexos Startup Template"></a>Viewing Hexos Startup Template</h2><p>In command prompt, in my dataGriff directory, I typed<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure></p>
<p>Again I got the satisfying message of<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO hexo is running at http://localhost:4000/.</span><br></pre></td></tr></table></figure></p>
<p>So with trepidation I went to the <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> link in a browser and…<br>Hey presto! I could see hexos startup template! Success!<br>To stop the page running you can just press CTRL+C in the command prompt and confirm the termination.</p>
<p><img src="/images/HexoDefault.png" alt="Hexo Default Startup Page"></p>
<p>Using the hexo server command is a good way of testing your site locally before deployment.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[YAML And Markdown Example]]></title>
      <url>www.datagriff.com/2016/06/YAMLAndMarkdown/</url>
      <content type="html"><![CDATA[<p>Markdown (.md) files offer the ability to use shorthand methods to generate HTML. Simply create a text file in your<br>favourite text editor and save it as FileName.md. Then you have yourself a markdown file.<br>This is particularly useful for bloggers where markdown is easier to quickly type and potentially easier to read as<br>raw code than HTML. Github already supports markdown files and a number of static site generators use markdown as their<br>raw source files to generate HTML. Where markdown caters for the content, YAML, which stands for “YAML ain’t markup language”, handles the metadata for the markdown document.</p>
<h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><p><strong>YAML</strong> stands for “YAML aint markup language” and is the metadata component of the page which can contain title, date and tags among others.<br>So at the top of my markdown document I could contain some metadata in YAML that would look something like the following.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &apos;YAML And Markdown Example&apos;</span><br><span class="line">date: 2016-06-23</span><br><span class="line">categories: Markdown</span><br><span class="line">tags: [&apos;Learning&apos;,&apos;YAML&apos;,&apos;Markdown&apos;]</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><p><strong>Markdown</strong> is an easy way to write content with shorthand methods instead of using something with tags (like HTML) so prose is easier to write and read when coded.<br>You can get more information on markdown at the creators of markdown <a href="https://daringfireball.net/" title="Daring Fireball" target="_blank" rel="external">Daring Fireball</a> or this nice cheatsheet from <a href="https://enterprise.github.com/downloads/en/markdown-cheatsheet.pdf&quot;" title="Github Markdown Cheatsheet" target="_blank" rel="external">github</a>.<br>The Markdown that generated the HTML above looks like this.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## Markdown</span><br><span class="line">**Markdown** is an easy way to write content with shorthand methods instead of using something with tags (like HTML) so prose is easier to write and read when coded.</span><br><span class="line">You can get more information on markdown at the creators of markdown [Daring Fireball](https://daringfireball.net/ &quot;Daring Fireball&quot;) or this nice cheatsheet from [github](https://enterprise.github.com/downloads/en/markdown-cheatsheet.pdf&quot; &quot;Github Markdown Cheatsheet&quot;).</span><br><span class="line">The Markdown that generated the HTML above looks like this.</span><br></pre></td></tr></table></figure>
<p>Where the ## translates to a header h1 tag in HTML and the asterisks wrapped around a word translate to bold. Links are represented as [Name to Display](URL “Title”).</p>
<h3 id="Markdown-Lists"><a href="#Markdown-Lists" class="headerlink" title="Markdown Lists"></a>Markdown Lists</h3><p>You can use asterisks (*) to create unordered lists in your markdown</p>
<ul>
<li>I</li>
<li>am</li>
<li>unordered</li>
</ul>
<p>Where the markdown that generates this HTML looks like the following.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### Markdown Lists</span><br><span class="line">You can use asterisks (\*) to create unordered lists in your markdown</span><br><span class="line">* I</span><br><span class="line">* am</span><br><span class="line">* unordered</span><br></pre></td></tr></table></figure>
<p>You can see that ### creates a h3, the backslash is an escape character (for the asterisk) and asterisks generate the unordered bullets.</p>
<p>or the number 1 and a full stop (1.) to create ordered lists</p>
<ol>
<li>I</li>
<li>am</li>
<li>ordered</li>
</ol>
<p>Where the markdown that generates this HTML looks the following.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">or the number 1 and a full stop (1.) to create ordered lists</span><br><span class="line">1. I</span><br><span class="line">1. am</span><br><span class="line">1. ordered</span><br></pre></td></tr></table></figure>
<p>You can see that 1. creates an ordered list.</p>
<h3 id="Markdown-Code-blocks"><a href="#Markdown-Code-blocks" class="headerlink" title="Markdown Code blocks"></a>Markdown Code blocks</h3><p>You can also create code snippets using markdown by using three backticks above and below your markdown code.<br>Where is backtick on your keyboard?? It’s the Windows key and the backtick key (top left on a Qwerty keyboard)..</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Message(&quot;Hello World&quot;);</span><br></pre></td></tr></table></figure>
<p>I can display the code specifically (ish) as SQL by adding the keyword sql after the top three backticks if I like too…</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> dbo.TestTable</span><br><span class="line">(RowNo <span class="built_in">INT</span>, RowValue <span class="built_in">CHAR</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.TestTable</span><br><span class="line"><span class="keyword">WHERE</span> RowNo = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h3 id="Markdown-Editors"><a href="#Markdown-Editors" class="headerlink" title="Markdown Editors"></a>Markdown Editors</h3><p>I currently use <a href="https://atom.io/" title="Atom" target="_blank" rel="external">Atom</a>   as my local markdown editor but there are also plenty of online markdown editors if you want to just try it out, such as <a href="https://stackedit.io/" title="stackedit" target="_blank" rel="external">stackedit</a> or <a href="http://dillinger.io/ [dillinger]" title="dillinger" target="_blank" rel="external">dillinger</a>. Also remember any github files saved as markdown (.md) will also display accordingly as HTML when viewed.</p>
]]></content>
    </entry>
    
  
  
</search>
